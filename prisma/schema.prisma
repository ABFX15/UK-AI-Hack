// DeFi Regulatory Compliance Platform
// Prisma Schema for Banking Institutions

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  walletAddress    String?  @unique
  institutionType  InstitutionType
  regulatoryId     String?  // Bank charter number, etc.
  country          String
  riskTolerance    RiskTolerance @default(MEDIUM)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  complianceAnalyses ComplianceAnalysis[]
  complianceReports  ComplianceReport[]
  complianceSettings ComplianceSettings?
  amlAnalyses       AMLAnalysis[]
  
  @@map("institutions")
}

model ComplianceAnalysis {
  id                     String   @id @default(cuid())
  protocolAddress        String
  institutionAddress     String?
  protocolName          String?
  riskScore             Float
  riskLevel             RiskLevel
  recommendation        ComplianceRecommendation
  maxExposurePercentage Float?
  analysisData          Json     // Full AI analysis result
  analysisTimestamp     DateTime
  createdAt             DateTime @default(now())

  // Relations
  institution Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?
  
  @@map("compliance_analyses")
}

model AMLAnalysis {
  id                  String   @id @default(cuid())
  transactionHash     String   @unique
  amountUsd          Float
  counterpartyAddress String
  amlRiskScore       Float
  complianceLevel    ComplianceLevel
  suspiciousPatterns String[]
  requiresManualReview Boolean
  analysisData       Json     // Full AML analysis result
  analysisTimestamp  DateTime
  createdAt          DateTime @default(now())

  // Relations
  institution Institution? @relation(fields: [institutionId], references: [id])
  institutionId String?
  
  @@map("aml_analyses")
}

model ComplianceReport {
  id                        String   @id @default(cuid())
  institutionId            String
  reportPeriod             String   // "30d", "90d", etc.
  overallComplianceScore   Float
  totalProtocolsAnalyzed   Int
  averageProtocolRisk      Float
  highRiskProtocols        Int
  totalTransactionsAnalyzed Int
  flaggedTransactions      Int
  reportData              Json     // Full report data
  generatedAt             DateTime @default(now())

  // Relations
  institution Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  
  @@map("compliance_reports")
}

model ComplianceSettings {
  id                      String   @id @default(cuid())
  institutionId          String   @unique
  riskToleranceLevel     RiskTolerance @default(MEDIUM)
  maxExposurePercentage  Float    @default(15.0)
  enableAMLMonitoring    Boolean  @default(true)
  enableProtocolWhitelist Boolean @default(true)
  customRiskParameters   Json     @default("{}")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  institution Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  
  @@map("compliance_settings")
}

model DeFiProtocol {
  id              String   @id @default(cuid())
  address         String   @unique
  name            String
  category        String   // "lending", "dex", "yield", etc.
  blockchain      String   @default("ethereum")
  tvlUsd         Float?
  auditStatus    AuditStatus
  governanceType String?
  lastAnalyzed   DateTime?
  whitelisted    Boolean  @default(false)
  blacklisted    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("defi_protocols")
}

model RegulatoryAlert {
  id            String      @id @default(cuid())
  institutionId String?
  alertType     AlertType
  severity      AlertSeverity
  title         String
  description   String
  triggerData   Json?       // Data that triggered the alert
  acknowledged  Boolean     @default(false)
  acknowledgedAt DateTime?
  resolvedAt    DateTime?
  createdAt     DateTime    @default(now())

  @@map("regulatory_alerts")
}

model AuditLog {
  id            String   @id @default(cuid())
  institutionId String?
  action        String
  resourceType  String   // "protocol", "transaction", "report", etc.
  resourceId    String?
  userId        String?
  ipAddress     String?
  userAgent     String?
  metadata      Json?
  timestamp     DateTime @default(now())

  @@map("audit_logs")
}

model SystemSettings {
  id          String @id @default(cuid())
  key         String @unique
  value       String
  description String?
  
  @@map("system_settings")
}

enum InstitutionType {
  COMMERCIAL_BANK
  INVESTMENT_BANK
  CREDIT_UNION
  FINTECH
  HEDGE_FUND
  FAMILY_OFFICE
  OTHER
}

enum RiskTolerance {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ComplianceRecommendation {
  APPROVED_FOR_INSTITUTIONAL_USE
  APPROVED_WITH_LIMITATIONS
  REQUIRES_ADDITIONAL_REVIEW
  BLOCKED_HIGH_RISK
  BLOCKED_ANALYSIS_FAILED
}

enum ComplianceLevel {
  COMPLIANT
  REQUIRES_REVIEW
  BLOCKED
}

enum AuditStatus {
  UNAUDITED
  AUDITED
  MULTIPLE_AUDITS
  AUDIT_FAILED
}

enum AlertType {
  HIGH_RISK_PROTOCOL
  SUSPICIOUS_TRANSACTION
  REGULATORY_CHANGE
  SYSTEM_ERROR
  MANUAL_REVIEW_REQUIRED
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
